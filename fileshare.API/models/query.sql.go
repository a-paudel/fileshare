// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package models

import (
	"context"
)

const checkIfCodeExists = `-- name: CheckIfCodeExists :one
select count(*) from files where code = ?
`

func (q *Queries) CheckIfCodeExists(ctx context.Context, code string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkIfCodeExists, code)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFile = `-- name: CreateFile :exec
insert into files (code, filename, filesize) values (?, ?, ?)
`

type CreateFileParams struct {
	Code     string
	Filename string
	Filesize int64
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) error {
	_, err := q.db.ExecContext(ctx, createFile, arg.Code, arg.Filename, arg.Filesize)
	return err
}

const deleteFileByCode = `-- name: DeleteFileByCode :exec
delete from files where code = ?
`

func (q *Queries) DeleteFileByCode(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, deleteFileByCode, code)
	return err
}

const getExpiredFiles = `-- name: GetExpiredFiles :many
select created_at, updated_at, code, filename, filesize, expires_at from files where expires_at < current_timestamp
`

func (q *Queries) GetExpiredFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getExpiredFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Code,
			&i.Filename,
			&i.Filesize,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFileByCode = `-- name: GetFileByCode :one
select created_at, updated_at, code, filename, filesize, expires_at from files where code = ?
`

func (q *Queries) GetFileByCode(ctx context.Context, code string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileByCode, code)
	var i File
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Code,
		&i.Filename,
		&i.Filesize,
		&i.ExpiresAt,
	)
	return i, err
}
